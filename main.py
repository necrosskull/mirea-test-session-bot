import json
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from config import TELEGRAM_TOKEN
import logging
from datetime import datetime
from lazy_logger import lazy_logger
import re

weekdays = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1,
    '–≤—Ç–æ—Ä–Ω–∏–∫': 2,
    '—Å—Ä–µ–¥–∞': 3,
    '—á–µ—Ç–≤–µ—Ä–≥': 4,
    '–ø—è—Ç–Ω–∏—Ü–∞': 5,
    '—Å—É–±–±–æ—Ç–∞': 6,
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 7
}

group_pattern = r'[–ê-–Ø–∞-—è]{4}-\d{2}-\d{2}'
exam_pattern = r'—ç–∫–∑ (.+)|–≠–∫–∑ (.+)|–≠–ö–ó (.+)'
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)


def start(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="–ü—Ä–∏–≤–µ—Ç!\n–ù–∞ –ø–µ—Ä–∏–æ–¥ —Å–µ—Å—Å–∏–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–æ–≤.\n"
                                  "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                                  "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n")


def search(update, context):
    with open('data/exams.json', 'r', encoding='utf-8') as f:
        exams = json.load(f)

    mode = 'teacher'

    query = update.message.text

    if re.match(group_pattern, query):
        mode = 'group'

    if mode == 'teacher':
        if " " not in query:
            query += " "

    if len(query) < 3:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å")
        return

    lazy_logger.info(json.dumps({"type": "request", "query": query.lower(), **update.message.from_user.to_dict()},
                                ensure_ascii=False))

    if mode == 'teacher':
        exam_ids = [exam_id for exam_id, teacher in exams['teachers'].items() if query.lower() in teacher.lower()]
    else:
        exam_ids = [exam_id for exam_id, group in exams['group'].items() if query.lower() == group.lower()]

    if not exam_ids:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    unique_exams = {}
    try:
        for exam_id in exam_ids:
            if (exams['weekday'][exam_id], exams['time_start'][exam_id], exams['weeks'][exam_id]) in unique_exams:
                unique_exams[(exams['weekday'][exam_id], exams['time_start'][exam_id],
                              exams['weeks'][exam_id])]['group'].append(exams['group'][exam_id])
            else:
                unique_exams[(exams['weekday'][exam_id], exams['time_start'][exam_id],
                              exams['weeks'][exam_id])] = {
                    'exam': exams['lesson'][exam_id],
                    'group': [exams['group'][exam_id]],
                    'num': exams['lesson_num'][exam_id],
                    'teacher': exams['teachers'][exam_id],
                    'room': exams['room'][exam_id],
                    'campus': exams['campus'][exam_id][0],
                    'weekday': exams['weekday'][exam_id],
                    'weeks': exams['weeks'][exam_id],
                    'time_start': exams['time_start'][exam_id],
                    'time_end': exams['time_end'][exam_id],
                    'type': exams['type'][exam_id]
                }

        sorted_exams = sorted(unique_exams.items(), key=lambda x: (x[1]['weeks'], weekdays[x[1]['weekday']],
                                                                   x[1]['time_start']))
        text = ""
        blocks = []

        if mode == 'teacher':
            surnames = list(set([exam[1]['teacher'] for exam in sorted_exams]))
            surnames_str = ', '.join(surnames)
            if len(surnames) > 1:
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ({query}) –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n({surnames_str})"
                                              f"\n\n–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
                return

        for exam in sorted_exams:
            groups = ', '.join(exam[1]['group'])
            weekday = exam[1]['weekday'].title()
            time_start = exam[1]['time_start']
            time_end = exam[1]['time_end']
            weeks = exam[1]['weeks']
            campus = exam[1]['campus']
            room = exam[1]['room']
            teacher = exam[1]['teacher']
            teachers = ", ".join([teacher])
            lesson = exam[1]['exam']
            num = exam[1]['num']
            time_start = datetime.strptime(time_start, "%H:%M:%S").strftime("%H:%M")
            time_end = datetime.strptime(time_end, "%H:%M:%S").strftime("%H:%M")

            formatted_time = f"{time_start} ‚Äì {time_end}"
            text += f'üìÖ –ù–µ–¥–µ–ª–∏: {weeks}\n'
            text += f"üìÜ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday}\n"
            text += f'üìù –ü–∞—Ä–∞ ‚Ññ {num} –≤ ‚è∞ {formatted_time}\n'
            text += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏: {room} ({campus})\n"
            text += f'üìù {lesson}\n'
            if len(groups) > 0:
                text += f'üë• –ì—Ä—É–ø–ø—ã: {groups}\n'
            if exam[1]['type']:
                text += f'üìö –¢–∏–ø: {exam[1]["type"]}\n'
            text += f"üë®üèª‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {teachers}\n\n"

            blocks.append(text)
            text = ""
            chunk = ""
            first = True
            for block in blocks:
                if len(chunk) + len(block) <= 4096:
                    chunk += block
                else:
                    if first:
                        context.bot.send_message(chat_id=update.effective_chat.id, text=chunk)
                        first = False
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text=chunk)

                    chunk = block

        context.bot.send_message(chat_id=update.effective_chat.id, text=chunk)

    except Exception as e:
        print(e)
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")


def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start, run_async=True))
    dp.add_handler(CommandHandler('help', start, run_async=True))
    dp.add_handler(MessageHandler(Filters.text, search, run_async=True))

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
